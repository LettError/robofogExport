# ROBOFOG ONLY# Export the current RoboFog font to UFO.__version__ = "1.2"import FogUFOExportreload(FogUFOExport)#FogUFOWriter = FogUFOExport.FogUFOWriterimport os, string# Glyph Naming# renameGlyphs = 1 will apply the glyph name stored by AGL Namer# renameGlyphs = 0 will just the original glyph name#renameGlyphs = 1# Lib Treatment# flattenLib = 1 stores the robofog dict as a set of nested dicts, robofog style# flattenLib = 0 stores the robofog dict as a flat dictionary with long.key.names.like.this.#flattenLib = 1# Outline Fixing# correctPath = 1 causes each robofog glyph to do a correct path direction before exporting# this might cause changes to the font#correctPath = 0# Interpret anchors# interpretAnchors = 1 causes single points to be written as named anchors.interpretAnchors = 1# optional rename dictionary# A dictionary mapping robofog glyphnames to other names.# Note: names defined in the lib take precedencerenameDict = {}	#{"E":"test_E"}f = CurrentFont()if f:	print "Exporting %s to UFO:"%f.name	fontName = string.split(f.name, '.')[0]	if f.path is not None:		ufoPath = os.path.join(os.path.dirname(f.path), fontName+"_RF.ufo")		fw = FogUFOWriter(f, ufoPath, 			renameGlyphs=renameGlyphs, 			flattenLib=flattenLib, 			correctPath=correctPath, 			interpretAnchors=interpretAnchors,			renameDict=renameDict			)		print 'Saved at', ufoPath	else:		print "couldn't save because the font isn't saved in RoboFog (yet)!"	print 'Done!'